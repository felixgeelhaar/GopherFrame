name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: write
  security-events: write
  actions: read
  pages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: |
        # Run all tests including examples
        go test -v -race ./...
        if [ $? -ne 0 ]; then
          echo "‚ùå Tests failed!"
          exit 1
        fi

        # Generate coverage only for pkg/ (exclude examples and cmd/)
        go test -v -race -coverprofile=coverage.out ./pkg/...
        if [ $? -ne 0 ]; then
          echo "‚ùå Coverage generation failed!"
          exit 1
        fi

    - name: Run property-based tests
      run: |
        go test -v -run TestProperty -count=3
        if [ $? -ne 0 ]; then
          echo "‚ùå Property-based tests failed!"
          exit 1
        fi

    - name: Check test coverage threshold
      run: |
        # Calculate coverage percentage for pkg/ (examples excluded)
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "üìä Current test coverage (pkg/): ${COVERAGE}%"

        # Set minimum coverage threshold (80% for production code)
        THRESHOLD=80

        # Compare coverage to threshold
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        else
          echo "‚úÖ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m --out-format=colored-line-number

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^$ > benchmark.txt

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'go'
        output-file-path: benchmark.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        # Exclude G304 (file inclusion) - legitimate for data processing library with path validation
        gosec -exclude=G304 -fmt sarif -out gosec.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()